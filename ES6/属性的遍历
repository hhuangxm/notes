先介绍一下，属性的可枚举，这个就不单独写一篇了，

对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。

如果Object.getOwnPropertyDescriptor方法返回的是false,说明该属性不可枚举，如果是true,则代表该属性可枚举

ES6还规定，Class中的所有方法都是不可枚举的

判断一个属性是否可枚举，关系到遍历属性的问题

for...in循环：只遍历对象自身的和继承的可枚举的属性
Object.keys()：返回对象自身的所有可枚举的属性的键名
JSON.stringify()：只串行化对象自身的可枚举的属性
Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性

接下来介绍属性的遍历

ES6一共提供了6中方法
（1）for...in
  for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。
  for (变量 in 对象)
  {
      在此执行代码
  }
  
（2）Object.keys(obj)
  Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。原来没用过这个方法，以后可以试试
  var a = [1,2,3,4];
  Object.keys(a)[0]; //“1”
  
（3）Object.getOwnPropertyNames(obj)
  Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。
  
（4）Object.getOwnPropertySymbols(obj)
  Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。
  
（5）Reflect.ownKeys(obj)
  Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。
  
 以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。

  首先遍历所有属性名为数值的属性，按照数字排序。
  其次遍历所有属性名为字符串的属性，按照生成时间排序。
  最后遍历所有属性名为Symbol值的属性，按照生成时间排序。 
  
  
  
  
  
  
  
  
